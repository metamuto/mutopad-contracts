{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "02a6ccd5fabdeac87ac5f3a1008e74505b897b7c1331dde42cc0194ab441dfe0",
          "withoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5",
          "linkedWithoutMetadata": "54f76b783cd25a79e4b12c96b34907185d185efb128e0cb17a5bcd7f673ed3a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "whitelistUpdate(uint64,bytes32)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4837_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4638_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4837_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4638_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4837_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "7208ecd03c3b26640a45d3b6932626887eb7c25dc1f16c226b0694b16ab946f1",
          "withoutMetadata": "401e0edbd282f20c19e25cf9b27ab41bb417d12d11bb04435e0c52c1ace6c8c7",
          "linkedWithoutMetadata": "401e0edbd282f20c19e25cf9b27ab41bb417d12d11bb04435e0c52c1ace6c8c7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4800_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4601_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4800_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4601_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4800_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "82ca4a01ae57d5b356a01d9ba00fad447e79b21f37058eabaec13deb1b75cbbb",
          "withoutMetadata": "66d4b657ccce4c54ddc35e8bd37f46a9b7401722d74f61468f87d0460c550a2e",
          "linkedWithoutMetadata": "66d4b657ccce4c54ddc35e8bd37f46a9b7401722d74f61468f87d0460c550a2e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4791_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4592_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4791_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4592_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4791_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "653d1a98ae288226b20008325bc39e1ea8974f8f488038dce809e48eb2d47d40",
          "withoutMetadata": "a87908bd7b22d79632b842fabd2df3e3e5595479ec09a4b51ad25183c63ecc68",
          "linkedWithoutMetadata": "a87908bd7b22d79632b842fabd2df3e3e5595479ec09a4b51ad25183c63ecc68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4791_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4592_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4791_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4592_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4791_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "30ed5ec213abd0229f2a077c3db3d081a8c1ddb7f0a82abec69f819d9d9bb4e1",
          "withoutMetadata": "c390028fc530c93c124e247a4d070f554b93353ff8f36f7c203ddb39bac63bfd",
          "linkedWithoutMetadata": "c390028fc530c93c124e247a4d070f554b93353ff8f36f7c203ddb39bac63bfd"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4805_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4606_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4805_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4606_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4805_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "e48a5b35be00574cc93c710241ce9d08bee0969800e37f475ed631edc5cb355b",
          "withoutMetadata": "116b283380b362f1d532dc0ac0e43d81fd1eb1f6f40cd420a4b200183725c41c",
          "linkedWithoutMetadata": "116b283380b362f1d532dc0ac0e43d81fd1eb1f6f40cd420a4b200183725c41c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4612_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4413_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4612_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4413_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4612_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "8392c15b07eb8efacc458d01f4bd0777a05371e09df866b90baa4546eca6482b",
          "withoutMetadata": "cde6b42063a6cdde4b8e30ac3c1af9fe59280c434479c6bb428d2482b2047932",
          "linkedWithoutMetadata": "cde6b42063a6cdde4b8e30ac3c1af9fe59280c434479c6bb428d2482b2047932"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4559_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4360_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4559_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4360_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4559_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "893916e7760e6c5d78abdcb94dfd7a5ea1c991977e2442b2b237c7e63336dca8",
          "withoutMetadata": "ebd67d4a55565668c920d0da254efddf94d9df992e5252a0e7106db78e6ff640",
          "linkedWithoutMetadata": "ebd67d4a55565668c920d0da254efddf94d9df992e5252a0e7106db78e6ff640"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4642_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4443_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4642_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4443_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4642_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "890eb2b7e39c6f10370179df8cb6453963b946171ac50b36fde3b5e0016d462b",
          "withoutMetadata": "e73e3ad5ba5c7706f61db239538fd82dc61939709b380634fb34bdc6abd38be4",
          "linkedWithoutMetadata": "e73e3ad5ba5c7706f61db239538fd82dc61939709b380634fb34bdc6abd38be4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4548_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4349_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4548_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4349_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4548_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "56e1a97d47827833abb8f2944eaf4b5d79f33f343267f3aa1967cf8ef9980fee",
          "withoutMetadata": "f561c88e6537c3b82634f75102366db054c75372ec737955de54a9fbf9dc9db3",
          "linkedWithoutMetadata": "f561c88e6537c3b82634f75102366db054c75372ec737955de54a9fbf9dc9db3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4552_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4353_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4552_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4353_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4552_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "bd2da3eb5fad0503f9f55966880c7e81f27f26f707e7ca03532d6b833dcefba5",
          "withoutMetadata": "6914e6a2e5018bafb5cf0693ce910c2cfa8496a64c188aaccfc0b937f11fcc7d",
          "linkedWithoutMetadata": "6914e6a2e5018bafb5cf0693ce910c2cfa8496a64c188aaccfc0b937f11fcc7d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4635_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4436_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4635_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4436_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4635_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "808d057996f37dce28f3145cf22c2a96d81843b9ddd47bae7367e524363099cc",
          "withoutMetadata": "6b610e4cb8897d56abfc052dbc5364af804d465e81ae18a2e83e7ed09395e85f",
          "linkedWithoutMetadata": "6b610e4cb8897d56abfc052dbc5364af804d465e81ae18a2e83e7ed09395e85f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4831_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4632_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4831_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4632_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4831_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "a42bf7f0ae95d79a835b02ed3498c9bb0bfc5d2ab99425ce579100cc03ebf73c",
          "withoutMetadata": "c52c25356d472e8d5dcbabd444879f15e0d7af0bc26e0e033d68693637eb85db",
          "linkedWithoutMetadata": "c52c25356d472e8d5dcbabd444879f15e0d7af0bc26e0e033d68693637eb85db"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4799_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4600_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4799_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4600_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4799_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "974d8d3e2b920fb7058589790d5f28bb386eaa604dd7e548c4b1dfd1286fd264",
          "withoutMetadata": "d8259bf8c607d0c41b9a3312c30117a74b270078765a695458530b12c89cdba4",
          "linkedWithoutMetadata": "d8259bf8c607d0c41b9a3312c30117a74b270078765a695458530b12c89cdba4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4803_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4604_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4803_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4604_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4803_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "d35983a89bf4f3548a11eb530fef54113b174af06ae7b508dd4fb8c82f7e7803",
          "withoutMetadata": "62e81f1cc790fb2b9fcd73f139a4a3204ceb4f8538488b1711a1c043d0ae0ae9",
          "linkedWithoutMetadata": "62e81f1cc790fb2b9fcd73f139a4a3204ceb4f8538488b1711a1c043d0ae0ae9"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4823_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4624_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4823_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4624_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4823_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "0513059a832fb51896fcc7f99dd57c7d172486ec5cdcc71e71f064d5968229e2",
          "withoutMetadata": "ad1690cac3f90b43c72c6dab31d5e91891a567c73ebc693a9f6923978f3ece0b",
          "linkedWithoutMetadata": "ad1690cac3f90b43c72c6dab31d5e91891a567c73ebc693a9f6923978f3ece0b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4835_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4636_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4835_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4636_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4835_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "9263e7e3ba7ed2115aef0f409db52d5e81991a35c34af34f327afa4e4ed9593f",
          "withoutMetadata": "f1f6f9bf80bc6e4348d08222fb4f62512c14485e00c8664d6942bc0227069663",
          "linkedWithoutMetadata": "f1f6f9bf80bc6e4348d08222fb4f62512c14485e00c8664d6942bc0227069663"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4844_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4645_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4844_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4645_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4844_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "33ffdc9a1c7617c492e5a728b3720c722017b20c93bbf7e827ebc599495c8aa2",
          "withoutMetadata": "d0deb87d62544b9c358606b2173dfe507f18bd1093689f1362c0c37017d03630",
          "linkedWithoutMetadata": "d0deb87d62544b9c358606b2173dfe507f18bd1093689f1362c0c37017d03630"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4846_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4647_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4846_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4647_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4846_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "9263e7e3ba7ed2115aef0f409db52d5e81991a35c34af34f327afa4e4ed9593f",
          "withoutMetadata": "f1f6f9bf80bc6e4348d08222fb4f62512c14485e00c8664d6942bc0227069663",
          "linkedWithoutMetadata": "f1f6f9bf80bc6e4348d08222fb4f62512c14485e00c8664d6942bc0227069663"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4844_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4645_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4844_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4645_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4844_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "3cc857ddbe832a4a8c1c913c60de866d3924781d0d98cde74638f219c09ea076",
          "withoutMetadata": "a87908bd7b22d79632b842fabd2df3e3e5595479ec09a4b51ad25183c63ecc68",
          "linkedWithoutMetadata": "a87908bd7b22d79632b842fabd2df3e3e5595479ec09a4b51ad25183c63ecc68"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4791_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4592_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4791_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4592_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4791_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "5c5aa0c8072561b37c86ce84411ae25dcae14a83f31c64731b8d30a1a59aa68e",
          "withoutMetadata": "4ae1cf9b399dd1f76b8d16939762cb410490f72c1de0896d4f18f0b0c469b971",
          "linkedWithoutMetadata": "4ae1cf9b399dd1f76b8d16939762cb410490f72c1de0896d4f18f0b0c469b971"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4788_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4589_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4788_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4589_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4788_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "52cc72c80d4d29d401b8429cd80f61c2a5939d5015863133e2bd793fd7364d60",
          "withoutMetadata": "9bd50e73de1786db5b7258578e21addac6f3675e393d1c94039e5381a7d71e2c",
          "linkedWithoutMetadata": "9bd50e73de1786db5b7258578e21addac6f3675e393d1c94039e5381a7d71e2c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4781_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4582_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4781_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4582_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4781_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "7f0b2b20d7f76fb4b93512ac5c0ae5194cb3e0a9ccfab9fbe9f1742aee30abb7",
          "withoutMetadata": "09006a84cca5832b0d72da71295e72fa9ac4042db169a7cd84328901429b9c00",
          "linkedWithoutMetadata": "09006a84cca5832b0d72da71295e72fa9ac4042db169a7cd84328901429b9c00"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4785_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4586_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4785_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4586_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4785_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "b01a63319bfcd932fef91258e608132788c819d284681299a316f7a9a912f190",
          "withoutMetadata": "1d5885063a692100dbcaf10401007f2dca2dc80c77b4b8e8c0f12d7643e02313",
          "linkedWithoutMetadata": "1d5885063a692100dbcaf10401007f2dca2dc80c77b4b8e8c0f12d7643e02313"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4788_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4589_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4788_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4589_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4788_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "2aec4ca6a2e641ac3f045165bc393c8dee67fbbb6c9ae0c69114e96cc17af78e",
          "withoutMetadata": "02bf40b22a3ff72152d5db65b8441bc2b810361ebd192fbfb9a567e224428c33",
          "linkedWithoutMetadata": "02bf40b22a3ff72152d5db65b8441bc2b810361ebd192fbfb9a567e224428c33"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4747_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4548_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4747_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4548_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4747_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "6c9c3ac88ef830eb5a8b1f8cc7922a4605f16ef3c42b4562cda30f7c76b66b67",
          "withoutMetadata": "a4d102a689733f56f87c99a37d90326f91a9f1dbe71d6059dfddf16e6dc542a5",
          "linkedWithoutMetadata": "a4d102a689733f56f87c99a37d90326f91a9f1dbe71d6059dfddf16e6dc542a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4757_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4558_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4757_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4558_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4757_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "483f62ddffd5dded6dd1b260e1a3f31a1e96462c94377b2ec1f56320feed1771",
          "withoutMetadata": "2bc1897703156b7fdd44550e14c683a04c369cef1971723bc29b41a2337c735d",
          "linkedWithoutMetadata": "2bc1897703156b7fdd44550e14c683a04c369cef1971723bc29b41a2337c735d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4750_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4551_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4750_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4551_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4750_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be3eb2da4a17b780ac3616d48a76e6ab521b9cab52a2ebd96d65a1d646cb4d11",
          "withoutMetadata": "bf5fd8a57c4640089acf84cf97a502b0f59c041ab9161691688e00c2e88fbb6b",
          "linkedWithoutMetadata": "bf5fd8a57c4640089acf84cf97a502b0f59c041ab9161691688e00c2e88fbb6b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4750_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4551_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4750_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4551_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4750_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0daee3fee9cf60498595d329fdfe0d475d5f664d69a4e357d0b7fd6e21150440",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "74fc868363e9e2e95b67778dc4223bf7d2153a19afd2c8db279026807ea9e062",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "fef90541b2597396a908f8082b07ad9e648da3fc2288df2228cde6dcd9511898",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MutoPool.sol:MutoPool": {
        "src": "contracts/MutoPool.sol:52",
        "version": {
          "withMetadata": "be367e4872170b82f1f74a3e0f88f3fb90362cb465441d19deafc35fe1f259e0",
          "withoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942",
          "linkedWithoutMetadata": "4c9d1c97245060a02e11b2f6d7f89c6ec33196384c85cf46cc12bfca8f2e8942"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/SafeCast.sol:SafeCast",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet",
          "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap",
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "setFeeParameters(uint256,address)",
          "checkUserId(address)",
          "initialize()",
          "initiatePool((string,address,address,uint40,uint40,uint40,uint96,uint96,uint256,uint256,bool,(uint256,uint256)))",
          "getFormHash(uint64)",
          "updatePoolAdmin(uint64,uint40,uint40,uint40,uint256,uint256)",
          "updatePoolUser(uint64,string)",
          "getCurrentPoolPrice(uint256)",
          "markSpam(uint64)",
          "markCancel(uint64)",
          "deletPool(uint64)",
          "getEncodedOrder(uint64,uint96,uint96)",
          "placeSellOrders(uint64,bytes32[],uint96[],uint96[],bytes32[])",
          "placeSellOrdersOnBehalf(uint64,uint96[],uint96[],bytes32[],address)",
          "cancelSellOrders(uint64,bytes32[])",
          "refundOrder(uint64,bytes32)",
          "claimFromParticipantOrder(uint64,bytes32[])",
          "settlePoolAtomically(uint64,uint96[],uint96[],bytes32[])",
          "registerUser(address)",
          "getUserId(address)",
          "getSecondsRemainingInBatch(uint64)",
          "containsOrder(uint64,bytes32)",
          "settlePool(uint64)",
          "precalculateSellAmountSum(uint64,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "poolData",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_uint64,t_struct(PoolData)2222_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:64"
            },
            {
              "label": "sellOrders",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint256,t_struct(Data)4770_storage)",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:65"
            },
            {
              "label": "numUsers",
              "offset": 0,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:67"
            },
            {
              "label": "poolCounter",
              "offset": 8,
              "slot": "103",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:68"
            },
            {
              "label": "registeredUsers",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Data)4571_storage",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:69"
            },
            {
              "label": "feeReceiverUserId",
              "offset": 0,
              "slot": "106",
              "type": "t_uint64",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:71"
            },
            {
              "label": "feeNumerator",
              "offset": 0,
              "slot": "107",
              "type": "t_uint256",
              "contract": "MutoPool",
              "src": "contracts/MutoPool.sol:72"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20Upgradeable)378": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Data)4770_storage)": {
              "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_address)": {
              "label": "mapping(uint64 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(PoolData)2222_storage)": {
              "label": "mapping(uint64 => struct PoolData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4571_storage": {
              "label": "struct IdToAddressBiMap.Data",
              "members": [
                {
                  "label": "idToAddress",
                  "type": "t_mapping(t_uint64,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addressToId",
                  "type": "t_mapping(t_address,t_uint64)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Data)4770_storage": {
              "label": "struct IterableOrderedOrderSet.Data",
              "members": [
                {
                  "label": "nextMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevMap",
                  "type": "t_mapping(t_bytes32,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Decimals)2162_storage": {
              "label": "struct Decimals",
              "members": [
                {
                  "label": "tokenADecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBDecimal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitialPoolData)2190_storage": {
              "label": "struct InitialPoolData",
              "members": [
                {
                  "label": "formHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "poolingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "biddingToken",
                  "type": "t_contract(IERC20Upgradeable)378",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "orderCancellationEndDate",
                  "type": "t_uint40",
                  "offset": 20,
                  "slot": "2"
                },
                {
                  "label": "poolStartDate",
                  "type": "t_uint40",
                  "offset": 25,
                  "slot": "2"
                },
                {
                  "label": "poolEndDate",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pooledSellAmount",
                  "type": "t_uint96",
                  "offset": 5,
                  "slot": "3"
                },
                {
                  "label": "minBuyAmount",
                  "type": "t_uint96",
                  "offset": 17,
                  "slot": "3"
                },
                {
                  "label": "minimumBiddingAmountPerOrder",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "minFundingThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isAtomicClosureAllowed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "tokenDecimals",
                  "type": "t_struct(Decimals)2162_storage",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(PoolData)2222_storage": {
              "label": "struct PoolData",
              "members": [
                {
                  "label": "initData",
                  "type": "t_struct(InitialPoolData)2190_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "statusData",
                  "type": "t_struct(StatusData)2199_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "poolOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "initialPoolOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "interimSumBidAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "interimOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "clearingPriceOrder",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "volumeClearingPriceOrder",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "feeNumerator",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "merkleRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "17"
                }
              ],
              "numberOfBytes": "576"
            },
            "t_struct(StatusData)2199_storage": {
              "label": "struct StatusData",
              "members": [
                {
                  "label": "isScam",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isDeleted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isCancelled",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "minFundingThresholdNotReached",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IdToAddressBiMap.sol:IdToAddressBiMap": {
        "src": "contracts/libraries/IdToAddressBiMap.sol:9",
        "version": {
          "withMetadata": "95b38ae02c445f6caf9e82362fcf8740b5640ffdafe95744dccbaf176fc38f8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet": {
        "src": "contracts/libraries/IterableOrderedOrderSet.sol:6",
        "version": {
          "withMetadata": "9ae388f5a80c533da81a352d12bbb01e4610d2bddeda32a3e1c400706affb711",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/libraries/IterableOrderedOrderSet.sol:IterableOrderedOrderSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/SafeCast.sol:SafeCast": {
        "src": "contracts/libraries/SafeCast.sol:11",
        "version": {
          "withMetadata": "8da8439cf1c735e8134674b9f1d0dc7f09c93a793215413313947ecaae125644",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      }
    }
  ]
}